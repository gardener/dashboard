name: Cherry Pick Action (Improved)

on:
  issue_comment:
    types: [created]

permissions:
  contents: write
  pull-requests: write

jobs:
  parse-branches:
    runs-on: ubuntu-latest
    if: |
      github.event.issue.pull_request &&
      contains(github.event.comment.body, '/cherry-pick ') &&
      (github.event.comment.author_association == 'OWNER' || github.event.comment.author_association == 'MEMBER')
    outputs:
      branches: ${{ steps.parse.outputs.branches }}
      has-branches: ${{ steps.parse.outputs.has-branches }}
    steps:
      - name: Parse branches
        id: parse
        env:
          COMMENT_BODY: ${{ github.event.comment.body }}
        run: |
          BODY="$COMMENT_BODY"

          # Extract all branches from /cherry-pick commands
          # This handles both inline format: /cherry-pick branch1 /cherry-pick branch2
          # and multiline format with separate /cherry-pick commands
          # The 'sort -u' ensures branches are sorted and unique (duplicates removed)
          BRANCHES=$(echo "$BODY" | grep -oE '/cherry-pick[[:space:]]+[^[:space:]]+' | sed 's|/cherry-pick[[:space:]]*||g' | sort -u)

          if [ -z "$BRANCHES" ]; then
            echo "No valid cherry-pick commands found"
            echo "has-branches=false" >> $GITHUB_OUTPUT
            echo "branches=[]" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Validate branch names
          # Branch names should only contain alphanumeric characters, dots, hyphens, underscores, and forward slashes
          VALID_BRANCHES=""
          for branch in $BRANCHES; do
            if [[ "$branch" =~ ^[a-zA-Z0-9._/-]+$ ]]; then
              if [ -z "$VALID_BRANCHES" ]; then
                VALID_BRANCHES="$branch"
              else
                VALID_BRANCHES="$VALID_BRANCHES $branch"
              fi
            else
              echo "Warning: Skipping invalid branch name: $branch"
            fi
          done

          if [ -z "$VALID_BRANCHES" ]; then
            echo "No valid branch names found after validation"
            echo "has-branches=false" >> $GITHUB_OUTPUT
            echo "branches=[]" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Convert to JSON array format for matrix
          JSON_ARRAY="["
          FIRST=true
          for branch in $VALID_BRANCHES; do
            if [ "$FIRST" = true ]; then
              FIRST=false
            else
              JSON_ARRAY="$JSON_ARRAY,"
            fi
            JSON_ARRAY="$JSON_ARRAY\"$branch\""
          done
          JSON_ARRAY="$JSON_ARRAY]"

          echo "Found valid branches: $VALID_BRANCHES"
          echo "JSON array: $JSON_ARRAY"
          echo "has-branches=true" >> $GITHUB_OUTPUT
          echo "branches=$JSON_ARRAY" >> $GITHUB_OUTPUT

      - name: Comment on no branches found
        if: steps.parse.outputs.has-branches == 'false'
        run: |
          gh pr comment ${{ github.event.issue.number }} \
            --body "‚ùå No valid cherry-pick commands found in the comment. Please use the format: \`/cherry-pick branch-name\`" \
            --repo ${{ github.repository }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Comment on branches found
        if: steps.parse.outputs.has-branches == 'true'
        run: |
          # Debug: Show the raw branches JSON
          echo "Raw branches JSON: ${{ steps.parse.outputs.branches }}"

          # Create branches list with better error handling
          BRANCHES_JSON='${{ steps.parse.outputs.branches }}'
          echo "Processing JSON: $BRANCHES_JSON"

          if [ "$BRANCHES_JSON" = "[]" ] || [ -z "$BRANCHES_JSON" ]; then
            echo "Error: Empty or invalid branches JSON"
            exit 1
          fi

          # Generate the branches list
          BRANCHES_LIST=$(echo "$BRANCHES_JSON" | jq -r '.[]' | while read -r branch; do
            echo "- \`$branch\`"
          done)

          echo "Generated branches list:"
          echo "$BRANCHES_LIST"

          cat << EOF > comment.md
          üöÄ **Cherry-pick initiated for the following branches:**

          $BRANCHES_LIST

          _Processing cherry-picks..._ [View workflow run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
          EOF

          echo "Comment content:"
          cat comment.md

          gh pr comment ${{ github.event.issue.number }} \
            --body-file comment.md \
            --repo ${{ github.repository }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  cherry-pick:
    runs-on: ubuntu-latest
    needs: parse-branches
    if: needs.parse-branches.outputs.has-branches == 'true'
    strategy:
      matrix:
        target-branch: ${{ fromJson(needs.parse-branches.outputs.branches) }}
      fail-fast: false
    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          ref: master

      - name: Perform Cherry Pick
        uses: ./.github/actions/cherry-pick
        with:
          pr-number: ${{ github.event.issue.number }}
          target-branch: ${{ matrix.target-branch }}
          github-token: ${{ secrets.GITHUB_TOKEN }}

  summary:
    runs-on: ubuntu-latest
    needs: [parse-branches, cherry-pick]
    if: always() && needs.parse-branches.outputs.has-branches == 'true'
    steps:
      - name: Post completion summary
        run: |
          # Get the results from the cherry-pick job
          CHERRY_PICK_RESULT="${{ needs.cherry-pick.result }}"

          if [ "$CHERRY_PICK_RESULT" = "success" ]; then
            SUMMARY="‚úÖ **All cherry-pick operations completed successfully!**"
          elif [ "$CHERRY_PICK_RESULT" = "failure" ]; then
            SUMMARY="‚ö†Ô∏è **Some cherry-pick operations failed.** Check individual status comments above for details."
          else
            SUMMARY="‚ÑπÔ∏è **Cherry-pick operations completed with mixed results.** Check individual status comments above for details."
          fi

          gh pr comment ${{ github.event.issue.number }} \
            --body "$SUMMARY" \
            --repo ${{ github.repository }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

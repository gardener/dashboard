# Default values for gardener-dashboard.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.
replicaCount: 1

image:
  repository: eu.gcr.io/gardener-project/gardener/dashboard
  tag: latest
  pullPolicy: Always

logLevel: debug
apiServerUrl: https://api.example.org
# the certificateAuthorityData of the kube apiserver
# apiServerCaData: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCkxpNHUKLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ==
# or the certificateAuthority of the kube apiserver
# apiServerCa: |
#   -----BEGIN CERTIFICATE-----
#   Li4u
#   -----END CERTIFICATE-----
# or skip tls verify (insecure)
# apiServerSkipTlsVerify: true
containerPort: 8080
servicePort: 8080
resources:
  limits:
    cpu: 250m
    memory: 256Mi
  requests:
    cpu: 100m
    memory: 128Mi
hosts:
  - dashboard.ingress.example.org
  - dashboard.example.org
ingress:
  annotations:
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/use-port-in-redirects: "true"
    kubernetes.io/ingress.class: nginx
tls:
  crt: |
    -----BEGIN CERTIFICATE-----
    Li4u
    -----END CERTIFICATE-----
    -----BEGIN CERTIFICATE-----
    Li4u
    -----END CERTIFICATE-----
  key: |
    -----BEGIN RSA PRIVATE KEY-----
    Li4u
    -----END RSA PRIVATE KEY-----

# sessionSecret is used for signing and encrytion of session data
sessionSecret: ~
oidc:
  issuerUrl: https://identity.ingress.example.org
  # clientId is the public identifier of the gardener-dashboard aplication
  clientId: dashboard
  # clientSecret is the private secret of the gardener-dashboard aplication
  clientSecret: ~
  # redirectUri is the endpoint receiving the OTAC from the OpenID provider after successful login
  redirectUri: https://dashboard.ingress.example.org/auth/callback
  # configuration for kubeconfig download required by kubelogin
  # public:
  #  # clientId is the identifier of the public oidc client use by kubelogin
  #  clientId: kube-kubectl
  #  # clientSecret is the public client secret use by kubelogin and all users
  #  clientSecret: ~

frontendConfig:
  landingPageUrl: https://github.com/gardener
  helpMenuItems:
  - title: Getting Started
    icon: description
    url: https://github.com/gardener/gardener/tree/master/docs
  - title: Issues
    icon: bug_report
    url: https://github.com/gardener/gardener/issues
  # ticket:
  #   avatarSource: github # Define from which source the avatar is fetched. For enterprise github instances it is recommended to use gravatar or none. Possible values: github, gravatar, none
  #   gitHubRepoUrl: https://foo-github.com/dummyorg/dummyrepo
  #   hideClustersWithLabels: # hides clusters with labels on the 'ALL PROJECTS' page if the respective table option is enabled
  #   - ignore
  #   newTicketLabels: # these are the labels that are automatically preselected when creating a new ticket
  #   - default-label
  #   # issueDescriptionTemplate variables:
  #   # - `${shootName}`: name of the shoot
  #   # - `${shootNamespace}`: namespace of the shoot
  #   # - `${shootCreatedAt}`: creation timestamp of the shoot, format 'YYYY-MM-DD'
  #   # - `${shootUrl}`: dashboard url of the shoot
  #   # - `${providerType}`: shoot provider type
  #   # - `${region}`: region of the shoot
  #   # - `${machineImageNames}`: comma separated list of (unique) machine image names from the shoot workers
  #   # - `${projectName}`: name of the project
  #   # - `${utcDateTimeNow}`: current date-time in utc format
  #   # - `${seedName}`: shoot's seed name
  #   issueDescriptionTemplate: |
  #     ## Which cluster is affected?

  #     `Cluster Details Dashboard Link`: [${projectName}/${shootName}](${shootUrl})
  #     `Operating System`: ${machineImageNames}
  #     `Platform`: ${providerType}

  #     ## What happened?

  #     ## What you expected to happen?

  #     ## When did it happen or started to happen?
  #     `Timestamp`: ${utcDateTimeNow}

  #     ## How would we reproduce it?

  #     ## Anything else we need to know?
  defaultHibernationSchedule:
    evaluation:
    - start: 00 17 * * 1,2,3,4,5
    development:
    - start: 00 17 * * 1,2,3,4,5
      end: 00 08 * * 1,2,3,4,5
    production: ~
  seedCandidateDeterminationStrategy: SameRegion
  features:
    terminalEnabled: false
    projectTerminalShortcutsEnabled: false
  # alert:
  #   type: error
  #   message: This is an **alert** banner

  # terminal:
  #   shortcuts:
  #   - title: "Watch Control Plane Pods"
  #     description: Using kubectl to watch the pods of the control plane for this cluster
  #     target: cp # possible values: "cp" (Control Plane), "shoot", "garden"
  #     container:
  #       image: eu.gcr.io/gardener-project/gardener/ops-toolbelt:latest
  #       # command: ~
  #       args:
  #       - watch
  #       - kubectl
  #       - get
  #       - pods
  #       - "-o"
  #       - wide
  #   heartbeatIntervalSeconds: 60

  # # costObject is used for billing purposes and is assigned to the gardener project
  # costObject:
  #   title: Cost Object
  #   description: Costs for the control planes of the clusters in this project will be charged to this cost object.
  #   regex: ^([0-9]{10})$
  #   errorMessage: Invalid cost object

  # sla:
  #   title: SLAs
  #   description: https://foo.example.com/gardener-sla

  # # accessRestriction is used to define the access restricion text, keys and value mappings
  # accessRestriction:
  #   noItemsText: No access restriction options available for region ${region} and cloud profile ${cloudProfile}
  #   items:
  #   - key: seed.gardener.cloud/eu-access
  #     display:
  #       visibleIf: true
  #       # title: foo # optional title, if not defined key will be used
  #       # description: bar # optional description displayed in a tooltip
  #     input:
  #       title: EU Access
  #       description: |
  #         This service is offered to you with our regular SLAs and 24x7 support for the control plane of the cluster. 24x7 support for cluster add-ons and nodes is only available if you meet the following conditions:
  #       # inverted: false
  #     options:
  #     - key: support.gardener.cloud/eu-access-for-cluster-addons
  #       display:
  #         visibleIf: false
  #         # title: bar # optional title, if not defined key will be used
  #         # description: baz # optional description displayed in a tooltip
  #       input:
  #         title: No personal data is used as name or in the content of Gardener or Kubernetes resources (e.g. Gardener project name or Kubernetes namespace, configMap or secret in Gardener or Kubernetes)
  #         description: |
  #           If you can't comply, only third-level/dev support at usual 8x5 working hours in EEA will be available to you for all cluster add-ons such as DNS and certificates, Calico overlay network and network policies, kube-proxy and services, and everything else that would require direct inspection of your cluster through its API server
  #         inverted: true
  #     - key: support.gardener.cloud/eu-access-for-cluster-nodes
  #       display:
  #         visibleIf: false
  #       input:
  #         title: No personal data is stored in any Kubernetes volume except for container file system, emptyDirs, and persistentVolumes (in particular, not on hostPath volumes)
  #         description: |
  #           If you can't comply, only third-level/dev support at usual 8x5 working hours in EEA will be available to you for all node-related components such as Docker and Kubelet, the operating system, and everything else that would require direct inspection of your nodes through a privileged pod or SSH
  #         inverted: true

# # github configuration of the ticket feature
# gitHub:
#   apiUrl: https://api.foo-github.com
#   org: dummyorg
#   repository: dummyrepo
#   webhookSecret: foobar # optional if pollIntervalSeconds is defined
#   authentication:
#     username: dashboard
#     token: dummytoken
#   # pollIntervalSeconds: 30 # only necessary when dashboard's webhook can't be reached by github and thus polling needs to be done

livenessProbe:
  enabled: true
  initialDelaySeconds: 15
  periodSeconds: 20
  timeoutSeconds: 5
  failureThreshold: 6
  successThreshold: 1

readinessProbe:
  enabled: true
  initialDelaySeconds: 5
  periodSeconds: 10
  timeoutSeconds: 5
  failureThreshold: 6
  successThreshold: 1

# terminal:
#   container:
#     image: eu.gcr.io/gardener-project/gardener/ops-toolbelt:latest
#   containerOperator:
#     image: ~ # if not defined, value of terminal.container.image will be used
#   containerImageDescriptions:
#   - image: /eu.gcr.io/gardener-project/gardener/ops-toolbelt:.*/ # regexp must start and end with '/', otherwise it's an exact match
#     description: Run `ghelp` to get information about installed tools and packages
#   gardenTerminalHost: # cluster that hosts the terminal pods for the (virtual) garden cluster
#     apiServerIngressHost: api.example.org # is host in browser-trusted certificate. Optional, but required if using secretRef
#     secretRef:
#       namespace: garden # namespace, in which the secret for the gardenTerminalHost resides on the (virtual) garden cluster
#       labelSelector:
#       - runtime=gardenTerminalHost
#       # seedRef: my-soil # if set, you most likely want to disable gardenTerminalHost bootstrapping
#       # shootRef: # if set, you most likely want to disable gardenTerminalHost bootstrapping
#       #   name: myshoot
#       #   namespace: garden
#   garden: # (virtual) garden
#     operatorCredentials: # this is the credential used for operators for the (virtual) garden cluster, to create terminal session specific service accounts
#       serviceAccountRef: # serviceAccountRef or secretRef
#         name: dashboard-terminal-admin
#         namespace: garden
#   bootstrap:
#     disabled: true # indicates if bootstrapping resources required for the terminal feature is generally disabled
#     seedDisabled: false # indicates if bootstrapping resources for seeds is disabled, required for gardener operator terminals
#     shootDisabled: false # indicates if bootstrapping resources for shoots is disabled, required for enduser terminals
#     gardenTerminalHostDisabled: false # indicates if bootstrapping resources for the virtual garden terminal host cluster is disabled
#     apiServerIngress:
#       annotations:
#         kubernetes.io/ingress.class: nginx
#         nginx.ingress.kubernetes.io/backend-protocol: HTTPS
#         certmanager.k8s.io/cluster-issuer: lets-encrypt
#         certmanager.k8s.io/acme-challenge-type: dns01
#         certmanager.k8s.io/acme-dns01-provider: route53
#     queueOptions: ~ # here you can specify options like maxRetries, retryDelay https://github.com/diamondio/better-queue#new-queueprocess-options
#     gardenTerminalHost:
#       namespace: garden # namespace, in which the tls-secret, ingress and headless service should be created in
#       apiServerIngress:
#         annotations:
#           kubernetes.io/ingress.class: nginx
#           nginx.ingress.kubernetes.io/backend-protocol: HTTPS
#       apiServerTls: # Optional. Needs to be a browser-trusted certificate!
#         crt: |
#           -----BEGIN CERTIFICATE-----
#           Li4u
#           -----END CERTIFICATE-----
#           -----BEGIN CERTIFICATE-----
#           Li4u
#           -----END CERTIFICATE-----
#         key: |
#           -----BEGIN RSA PRIVATE KEY-----
#           Li4u
#           -----END RSA PRIVATE KEY-----

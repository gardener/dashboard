# SPDX-FileCopyrightText: 2021 SAP SE or an SAP affiliate company and Gardener contributors
#
# SPDX-License-Identifier: Apache-2.0

apiVersion: {{ include "deploymentversion" . }}
kind: Deployment
metadata:
  name: gardener-dashboard
  namespace: {{ .Release.Namespace }}
  labels:
    app: gardener-dashboard
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    release: "{{ .Release.Name }}"
    heritage: "{{ .Release.Service }}"
spec:
  replicas: {{ .Values.global.replicaCount }}
  selector:
    matchLabels:
      app: gardener-dashboard
      release: "{{ .Release.Name }}"
  template:
    metadata:
      annotations:
        checksum/configmap-gardener-dashboard-config: {{ include (print $.Template.BasePath "/configmap.yaml") . | sha256sum }}
        checksum/secret-gardener-dashboard-sessionSecret: {{ include (print $.Template.BasePath "/secret-sessionSecret.yaml") . | sha256sum }}
        {{- if .Values.global.oidc }}
        checksum/secret-gardener-dashboard-oidc: {{ include (print $.Template.BasePath "/secret-oidc.yaml") . | sha256sum }}
        {{- end }}
        {{- if .Values.global.github }}
        checksum/secret-gardener-dashboard-github: {{ include (print $.Template.BasePath "/secret-github.yaml") . | sha256sum }}
        {{- end }}
        {{- if .Values.global.kubeconfig }}
        checksum/secret-gardener-dashboard-kubeconfig: {{ include (print $.Template.BasePath "/secret-kubeconfig.yaml") . | sha256sum }}
        {{- end }}
      labels:
        app: gardener-dashboard
        release: {{ .Release.Name }}
        {{- if .Values.global.podLabels }}
{{ toYaml .Values.global.podLabels | indent 8 }}
        {{- end }}
    spec:
      volumes:
      - name: gardener-dashboard-config
        configMap:
          name: gardener-dashboard-configmap
          items:
          - key: config.yaml
            path: config.yaml
          defaultMode: 420
      - name: gardener-dashboard-login-config
        configMap:
          name: gardener-dashboard-configmap
          items:
          - key: login-config.json
            path: login-config.json
          defaultMode: 0444
      {{- if .Values.global.frontendConfig.assets }}
      - name: assets
        configMap:
          name: dashboard-assets
          defaultMode: 0444
      {{- end }}
      {{- if .Values.global.serviceAccountTokenVolumeProjection.enabled }}
      - name: service-account-token
        projected:
          sources:
          - serviceAccountToken:
              path: token
              expirationSeconds: {{ required ".Values.global.serviceAccountTokenVolumeProjection.expirationSeconds is required" .Values.global.serviceAccountTokenVolumeProjection.expirationSeconds }}
              {{- if .Values.global.serviceAccountTokenVolumeProjection.audience }}
              audience: {{ .Values.global.serviceAccountTokenVolumeProjection.audience }}
              {{- end }}
      {{- end }}
      {{- if .Values.global.kubeconfig }}
      - name: gardener-dashboard-secret-kubeconfig
        secret:
          secretName: gardener-dashboard-kubeconfig
      {{- end }}
      {{- if .Values.global.kubeconfig }}
      automountServiceAccountToken: false
      {{- end }}
      {{- if or ( not .Values.global.virtualGarden.enabled ) .Values.global.serviceAccountTokenVolumeProjection.enabled }}
      serviceAccountName: {{ required ".Values.global.serviceAccountName is required" .Values.global.serviceAccountName }}
      {{- else }}
      serviceAccountName: default
      {{- end }}
      containers:
        - name: gardener-dashboard
          {{- if .Values.global.nodeOptions }}
          args:
          {{- range .Values.global.nodeOptions }}
          - {{ . }}
          {{- end }}
          - server.js
          {{- end }}
          image: "{{ include "image" .Values.global.image }}"
          imagePullPolicy: {{ .Values.global.image.pullPolicy }}
          ports:
            - name: http
              containerPort: {{ .Values.global.containerPort }}
              protocol: TCP
          {{- if .Values.global.livenessProbe.enabled }}
          livenessProbe:
            tcpSocket:
              port: http
            initialDelaySeconds: {{ .Values.global.livenessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.global.livenessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.global.livenessProbe.timeoutSeconds }}
            successThreshold: {{ .Values.global.livenessProbe.successThreshold }}
            failureThreshold: {{ .Values.global.livenessProbe.failureThreshold }}
          {{- end }}
          {{- if .Values.global.readinessProbe.enabled }}
          readinessProbe:
            httpGet:
              path: /healthz
              port: http
            initialDelaySeconds: {{ .Values.global.readinessProbe.initialDelaySeconds }}
            periodSeconds: {{ .Values.global.readinessProbe.periodSeconds }}
            timeoutSeconds: {{ .Values.global.readinessProbe.timeoutSeconds }}
            successThreshold: {{ .Values.global.readinessProbe.successThreshold }}
            failureThreshold: {{ .Values.global.readinessProbe.failureThreshold }}
          {{- end }}
          env:
          - name: SESSION_SECRET
            valueFrom:
              secretKeyRef:
                name: gardener-dashboard-sessionsecret
                key: keyValue
          {{- if .Values.global.oidc }}
          - name: OIDC_CLIENT_ID
            valueFrom:
              secretKeyRef:
                name: gardener-dashboard-oidc
                key: client_id
          - name: OIDC_CLIENT_SECRET
            valueFrom:
              secretKeyRef:
                name: gardener-dashboard-oidc
                key: client_secret
          {{- if .Values.global.oidc.caSecretKeyRef }}
          - name: OIDC_CA
            valueFrom:
              secretKeyRef:
                name: {{  required ".Values.global.oidc.caSecretKeyRef.name is required" .Values.global.oidc.caSecretKeyRef.name }}
                key: {{ .Values.global.oidc.caSecretKeyRef.key | default "ca.crt" }}
          {{- end }}
          {{- end }}
          {{- if .Values.global.gitHub }}
          - name: GITHUB_AUTHENTICATION_TOKEN
            valueFrom:
              secretKeyRef:
                name: gardener-dashboard-github
                key: authentication.token
          - name: GITHUB_WEBHOOK_SECRET
            valueFrom:
              secretKeyRef:
                name: gardener-dashboard-github
                key: webhookSecret
          {{- end }}
          - name: GARDENER_CONFIG
            value: /etc/gardener-dashboard/config.yaml
          {{- if .Values.global.kubeconfig }}
          - name: KUBECONFIG
            value: /etc/gardener-dashboard/secrets/kubeconfig/kubeconfig
          {{- end }}
          resources:
{{ toYaml .Values.global.resources | trim | indent 12 }}
          volumeMounts:
          - name: gardener-dashboard-config
            mountPath: /etc/gardener-dashboard
          - name: gardener-dashboard-login-config
            mountPath: /app/public/login-config.json
            subPath: login-config.json
          {{- if .Values.global.frontendConfig.assets }}
          - name: assets
            mountPath: /app/public/static/assets
          {{- end }}
          {{- if .Values.global.serviceAccountTokenVolumeProjection.enabled }}
          - name: service-account-token
            mountPath: /var/run/secrets/projected/serviceaccount
            readOnly: true
          {{- end }}
          {{- if .Values.global.kubeconfig }}
          - name: gardener-dashboard-secret-kubeconfig
            mountPath: /etc/gardener-dashboard/secrets/kubeconfig
            readOnly: true
          {{- end }}
      restartPolicy: Always

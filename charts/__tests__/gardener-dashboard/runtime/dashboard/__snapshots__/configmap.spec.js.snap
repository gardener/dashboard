// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`gardener-dashboard configmap access restrictions should render the template w/ \`item.options\` 1`] = `
{
  "frontend": {
    "accessRestriction": {
      "items": [
        {
          "display": {
            "description": "display Foo description",
            "title": "display Foo",
            "visibleIf": true,
          },
          "input": {
            "description": "input Foo description",
            "inverted": true,
            "title": "input Foo",
          },
          "key": "foo",
          "options": [
            {
              "display": {
                "description": "display Foo  Option 1 description",
                "title": "display Foo Option 1",
                "visibleIf": false,
              },
              "input": {
                "description": "input Foo  Option 1 description",
                "title": "input Foo Option 1",
              },
              "key": "foo-option-1",
            },
            {
              "display": {
                "visibleIf": true,
              },
              "input": {
                "description": "input Foo  Option 2 description",
                "inverted": true,
                "title": "input Foo Option 2",
              },
              "key": "foo-option-2",
            },
          ],
        },
      ],
    },
  },
}
`;

exports[`gardener-dashboard configmap access restrictions should render the template w/o \`item.options\` 1`] = `
{
  "frontend": {
    "accessRestriction": {
      "items": [
        {
          "display": {
            "visibleIf": true,
          },
          "input": {
            "title": "Foo",
          },
          "key": "foo",
        },
      ],
      "noItemsText": "no items text",
    },
  },
}
`;

exports[`gardener-dashboard configmap alert should render the template w/ \`alert.identifier\` 1`] = `
{
  "frontend": {
    "alert": {
      "identifier": "bar",
      "message": "foo",
      "type": "warning",
    },
  },
}
`;

exports[`gardener-dashboard configmap alert should render the template w/o \`alert.identifier\` 1`] = `
{
  "frontend": {
    "alert": {
      "message": "foo",
      "type": "warning",
    },
  },
}
`;

exports[`gardener-dashboard configmap branding should render the template 1`] = `
{
  "frontend": {
    "branding": {
      "loginHints": [
        {
          "href": "https://gardener.cloud",
          "title": "Support",
        },
        {
          "href": "https://gardener.cloud/docs",
          "title": "Documentation",
        },
      ],
      "productName": "SuperCoolProduct",
      "productSlogan": "Slogan",
    },
  },
}
`;

exports[`gardener-dashboard configmap contentSecurityPolicy should render the template with connectSrc containing additional host sources 1`] = `
{
  "contentSecurityPolicy": {
    "connectSrc": [
      "'self'",
      "wss://*.seed.example.com",
      "https://*.seed.example.com",
    ],
  },
}
`;

exports[`gardener-dashboard configmap contentSecurityPolicy should render the template with default connectSrc 1`] = `
{
  "contentSecurityPolicy": {
    "connectSrc": [
      "'self'",
    ],
  },
}
`;

exports[`gardener-dashboard configmap controlPlaneHighAvailabilityHelp should render the template with controlPlaneHighAvailabilityHelp markdown 1`] = `
{
  "frontend": {
    "controlPlaneHighAvailabilityHelp": {
      "text": "[foo](https://bar.baz)",
    },
  },
}
`;

exports[`gardener-dashboard configmap experimental should render the template with experimental features 1`] = `
{
  "frontend": {
    "experimental": {
      "throttleDelayPerCluster": 42,
    },
  },
}
`;

exports[`gardener-dashboard configmap grantTypes should render the template 1`] = `
{
  "frontend": {
    "grantTypes": [
      "a",
      "b",
      "c",
    ],
  },
}
`;

exports[`gardener-dashboard configmap knownConditions should render the template with knownConditions markdown 1`] = `
{
  "frontend": {
    "knownConditions": {
      "ExampleConditionReady": {
        "description": "Example Description",
        "name": "Example",
        "shortName": "E",
        "showAdmin": false,
        "sortOrder": "99",
      },
    },
  },
}
`;

exports[`gardener-dashboard configmap kubeconfig download should render the template w/ \`public.client_secret\` 1`] = `
{
  "apiServerCaData": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCllYQnBVMlZ5ZG1WeVEyRT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ==",
  "oidc": {
    "ca": "-----BEGIN CERTIFICATE-----
Li4u
-----END CERTIFICATE-----",
    "issuer": "https://identity.garden.example.org",
    "public": {
      "clientId": "kube-kubectl",
      "clientSecret": "kube-kubectl-secret",
    },
    "redirect_uris": [
      "https://dashboard.garden.example.org/auth/callback",
      "https://dashboard.ingress.garden.example.org/auth/callback",
    ],
    "rejectUnauthorized": true,
    "scope": "openid email profile groups audience:server:client_id:dashboard audience:server:client_id:kube-kubectl",
  },
}
`;

exports[`gardener-dashboard configmap kubeconfig download should render the template w/o \`public.client_secret\` 1`] = `
{
  "apiServerCaData": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCllYQnBVMlZ5ZG1WeVEyRT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ==",
  "oidc": {
    "ca": "-----BEGIN CERTIFICATE-----
Li4u
-----END CERTIFICATE-----",
    "issuer": "https://identity.garden.example.org",
    "public": {
      "clientId": "kube-kubectl",
      "usePKCE": true,
    },
    "redirect_uris": [
      "https://dashboard.garden.example.org/auth/callback",
      "https://dashboard.ingress.garden.example.org/auth/callback",
    ],
    "rejectUnauthorized": true,
    "scope": "openid email profile groups audience:server:client_id:dashboard audience:server:client_id:kube-kubectl",
  },
}
`;

exports[`gardener-dashboard configmap kubeconfig download should render the template with PKCE flow for the public client 1`] = `
{
  "apiServerCaData": "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCllYQnBVMlZ5ZG1WeVEyRT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQ==",
  "oidc": {
    "ca": "-----BEGIN CERTIFICATE-----
Li4u
-----END CERTIFICATE-----",
    "issuer": "https://identity.garden.example.org",
    "public": {
      "clientId": "kube-kubectl",
      "clientSecret": "kube-kubectl-secret",
      "usePKCE": true,
    },
    "redirect_uris": [
      "https://dashboard.garden.example.org/auth/callback",
      "https://dashboard.ingress.garden.example.org/auth/callback",
    ],
    "rejectUnauthorized": true,
    "scope": "openid email profile groups audience:server:client_id:dashboard audience:server:client_id:kube-kubectl",
  },
}
`;

exports[`gardener-dashboard configmap login-config.json should render login-config with branding and themes 1`] = `
{
  "branding": {
    "loginHints": [
      {
        "href": "https://gardener.cloud",
        "title": "Support",
      },
      {
        "href": "https://gardener.cloud/docs",
        "title": "Documentation",
      },
    ],
    "productName": "SuperCoolProduct",
    "productSlogan": "Slogan",
  },
  "landingPageUrl": "https://gardener.cloud/",
  "loginTypes": [
    "oidc",
    "token",
  ],
  "themes": {
    "dark": {
      "main-navigation-title": "grey.darken3",
      "primary": "#ff0000",
    },
    "light": {
      "main-navigation-title": "grey.darken3",
      "primary": "#ff0000",
    },
  },
}
`;

exports[`gardener-dashboard configmap oidc should render the template with PKCE flow for the internal client 1`] = `
{
  "oidc": {
    "ca": "-----BEGIN CERTIFICATE-----
Li4u
-----END CERTIFICATE-----",
    "issuer": "https://identity.garden.example.org",
    "redirect_uris": [
      "https://dashboard.garden.example.org/auth/callback",
      "https://dashboard.ingress.garden.example.org/auth/callback",
    ],
    "rejectUnauthorized": true,
    "scope": "openid email profile groups audience:server:client_id:dashboard audience:server:client_id:kube-kubectl",
    "usePKCE": true,
  },
}
`;

exports[`gardener-dashboard configmap oidc should render the template with default scope 1`] = `
{
  "oidc": {
    "ca": "-----BEGIN CERTIFICATE-----
Li4u
-----END CERTIFICATE-----",
    "issuer": "https://identity.garden.example.org",
    "redirect_uris": [
      "https://dashboard.garden.example.org/auth/callback",
      "https://dashboard.ingress.garden.example.org/auth/callback",
    ],
    "rejectUnauthorized": true,
    "scope": "openid email profile groups audience:server:client_id:dashboard audience:server:client_id:kube-kubectl",
  },
}
`;

exports[`gardener-dashboard configmap oidc should render the template with scope containing offline_access 1`] = `
{
  "oidc": {
    "ca": "-----BEGIN CERTIFICATE-----
Li4u
-----END CERTIFICATE-----",
    "issuer": "https://identity.garden.example.org",
    "redirect_uris": [
      "https://dashboard.garden.example.org/auth/callback",
      "https://dashboard.ingress.garden.example.org/auth/callback",
    ],
    "rejectUnauthorized": true,
    "scope": "openid email groups offline_access",
    "sessionLifetime": 2592000,
  },
}
`;

exports[`gardener-dashboard configmap resourceQuotaHelp should render the template with resourceQuotaHelp markdown 1`] = `
{
  "frontend": {
    "resourceQuotaHelp": {
      "text": "[foo](https://bar.baz)",
    },
  },
}
`;

exports[`gardener-dashboard configmap shootAdminKubeconfig should render the template 1`] = `
{
  "frontend": {
    "shootAdminKubeconfig": {
      "enabled": true,
      "maxExpirationSeconds": 86400,
    },
  },
}
`;

exports[`gardener-dashboard configmap should render the template w/ defaults values 1`] = `
{
  "apiVersion": "v1",
  "kind": "ConfigMap",
  "metadata": {
    "labels": {
      "app.kubernetes.io/component": "dashboard",
      "app.kubernetes.io/instance": "gardener-dashboard",
      "app.kubernetes.io/managed-by": "Helm",
      "app.kubernetes.io/name": "gardener-dashboard",
      "helm.sh/chart": "gardener-dashboard-runtime-0.1.0",
    },
    "name": "gardener-dashboard-configmap",
    "namespace": "garden",
  },
}
`;

exports[`gardener-dashboard configmap should render the template w/ defaults values 2`] = `
{
  "landingPageUrl": "https://gardener.cloud/",
  "loginTypes": [
    "oidc",
    "token",
  ],
}
`;

exports[`gardener-dashboard configmap should render the template w/ defaults values 3`] = `
{
  "apiServerUrl": "https://api.garden.example.org",
  "contentSecurityPolicy": {
    "connectSrc": [
      "'self'",
    ],
  },
  "frontend": {
    "defaultHibernationSchedule": {
      "development": [
        {
          "end": "00 08 * * 1,2,3,4,5",
          "start": "00 17 * * 1,2,3,4,5",
        },
      ],
      "evaluation": [
        {
          "start": "00 17 * * 1,2,3,4,5",
        },
      ],
      "production": null,
    },
    "defaultNodesCIDR": "10.250.0.0/16",
    "experimental": {
      "throttleDelayPerCluster": 10,
    },
    "externalTools": [
      {
        "icon": "apps",
        "title": "Applications and Services Hub",
        "url": "https://apps.garden.example.org/foo/bar{?namespace,name}",
      },
    ],
    "features": {
      "oidcObservabilityUrlsEnabled": false,
      "projectTerminalShortcutsEnabled": false,
      "terminalEnabled": false,
    },
    "helpMenuItems": [
      {
        "icon": "description",
        "title": "Getting Started",
        "url": "https://gardener.cloud/about/",
      },
      {
        "icon": "mdi-slack",
        "title": "slack",
        "url": "https://kubernetes.slack.com/messages/gardener",
      },
      {
        "icon": "mdi-bug",
        "title": "Issues",
        "url": "https://github.com/gardener/dashboard/issues/",
      },
    ],
    "seedCandidateDeterminationStrategy": "SameRegion",
    "serviceAccountDefaultTokenExpiration": 7776000,
    "shootAdminKubeconfig": {
      "enabled": false,
      "maxExpirationSeconds": 86400,
    },
  },
  "logFormat": "text",
  "logLevel": "debug",
  "maxRequestBodySize": "100kb",
  "oidc": {
    "ca": "-----BEGIN CERTIFICATE-----
Li4u
-----END CERTIFICATE-----",
    "issuer": "https://identity.garden.example.org",
    "redirect_uris": [
      "https://dashboard.garden.example.org/auth/callback",
      "https://dashboard.ingress.garden.example.org/auth/callback",
    ],
    "rejectUnauthorized": true,
    "scope": "openid email profile groups audience:server:client_id:dashboard audience:server:client_id:kube-kubectl",
  },
  "port": 8080,
  "readinessProbe": {
    "periodSeconds": 10,
  },
  "terminal": {
    "container": {
      "image": "ops-toolbelt:0.11.0-mod1",
    },
    "garden": {
      "operatorCredentials": {
        "serviceAccountRef": {
          "name": "dashboard-terminal-admin",
          "namespace": "garden",
        },
      },
    },
    "gardenTerminalHost": {
      "seedRef": "soil-gcp",
    },
  },
}
`;

exports[`gardener-dashboard configmap sla should render the template with sla description markdown hyperlink 1`] = `
{
  "frontend": {
    "sla": {
      "description": "[foo](https://bar.baz)",
      "title": "SLA title",
    },
  },
}
`;

exports[`gardener-dashboard configmap terminal config garden cluster custom rolebBindings should default apiGroup 1`] = `
{
  "terminal": {
    "garden": {
      "roleBindings": [
        {
          "bindingKind": "ClusterRoleBinding",
          "roleRef": {
            "apiGroup": "rbac.authorization.k8s.io",
            "kind": "ClusterRole",
            "name": "test-role",
          },
        },
      ],
    },
  },
}
`;

exports[`gardener-dashboard configmap terminal config garden cluster custom rolebBindings should render the template 1`] = `
{
  "terminal": {
    "garden": {
      "roleBindings": [
        {
          "bindingKind": "ClusterRoleBinding",
          "roleRef": {
            "apiGroup": "rbac.authorization.k8s.foo",
            "kind": "ClusterRole",
            "name": "test-role",
          },
        },
      ],
    },
  },
}
`;

exports[`gardener-dashboard configmap terminal config should render the template 1`] = `
{
  "terminal": {
    "container": {
      "image": "chart-test:0.1.0",
    },
    "garden": {
      "operatorCredentials": {
        "serviceAccountRef": {
          "name": "robot",
          "namespace": "garden",
        },
      },
    },
    "gardenTerminalHost": {
      "seedRef": "my-seed",
    },
    "serviceAccountTokenExpiration": 42,
  },
}
`;

exports[`gardener-dashboard configmap terminal shortcuts should render the template 1`] = `
{
  "frontend": {
    "terminal": {
      "shortcuts": [
        {
          "container": {
            "args": [
              "a",
              "b",
              "c",
            ],
            "command": [
              "command",
            ],
            "image": "repo:tag",
          },
          "description": "description",
          "target": "foo-target",
          "title": "title",
        },
      ],
    },
  },
}
`;

exports[`gardener-dashboard configmap themes should render the template 1`] = `
{
  "frontend": {
    "themes": {
      "dark": {
        "main-navigation-title": "grey.darken3",
        "primary": "#ff0000",
      },
      "light": {
        "main-navigation-title": "grey.darken3",
        "primary": "#ff0000",
      },
    },
  },
}
`;

exports[`gardener-dashboard configmap themes should render the template with light theme values only 1`] = `
{
  "frontend": {
    "themes": {
      "light": {
        "main-navigation-title": "grey.darken3",
        "primary": "#ff0000",
      },
    },
  },
}
`;

exports[`gardener-dashboard configmap tickets github app authentication should render the template 1`] = `
{
  "frontend": {
    "ticket": {
      "avatarSource": "gravatar",
      "gitHubRepoUrl": "https://github.com/gardener/tickets",
      "hideClustersWithLabels": [
        "ignore1",
        "ignore2",
      ],
      "newIssue": {
        "body": "issue description",
        "labels": [
          "default-label",
        ],
      },
    },
  },
  "gitHub": {
    "apiUrl": "https://github.com/api/v3/",
    "org": "gardener",
    "pollIntervalSeconds": 60,
    "repository": "tickets",
    "syncConcurrency": 5,
    "syncThrottleSeconds": 10,
  },
}
`;

exports[`gardener-dashboard configmap tickets github app authentication should render the template 2`] = `
{
  "authentication.appId": "1",
  "authentication.clientId": "clientId",
  "authentication.clientSecret": "clientSecret",
  "authentication.installationId": "123",
  "authentication.privateKey": "privateKey",
  "webhookSecret": "webhookSecret",
}
`;

exports[`gardener-dashboard configmap tickets token authentication should render the template 1`] = `
{
  "frontend": {
    "ticket": {
      "avatarSource": "gravatar",
      "gitHubRepoUrl": "https://github.com/gardener/tickets",
      "hideClustersWithLabels": [
        "ignore1",
        "ignore2",
      ],
      "newIssue": {
        "body": "issue description",
        "labels": [
          "default-label",
        ],
      },
    },
  },
  "gitHub": {
    "apiUrl": "https://github.com/api/v3/",
    "org": "gardener",
    "pollIntervalSeconds": 60,
    "repository": "tickets",
    "syncConcurrency": 5,
    "syncThrottleSeconds": 10,
  },
}
`;

exports[`gardener-dashboard configmap tickets token authentication should render the template 2`] = `
{
  "authentication.token": "token",
  "webhookSecret": "webhookSecret",
}
`;

exports[`gardener-dashboard configmap token request should render the template 1`] = `
{
  "frontend": {
    "serviceAccountDefaultTokenExpiration": 42,
  },
  "tokenRequestAudiences": [
    "foo",
    "bar",
  ],
}
`;

exports[`gardener-dashboard configmap unreachable seeds should render the template 1`] = `
{
  "unreachableSeeds": {
    "matchLabels": {
      "seed": "unreachable",
    },
  },
}
`;

exports[`gardener-dashboard configmap vendorHints should render the template 1`] = `
{
  "frontend": {
    "vendorHints": [
      {
        "matchNames": [
          "foo",
          "bar",
        ],
        "message": "[foo](https://bar.baz)",
        "severity": "warning",
      },
      {
        "matchNames": [
          "fooz",
        ],
        "message": "other message",
      },
    ],
  },
}
`;
